# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
require 'set'
require "benchmark"

def triag(n)
  n * (n+1) / 2
end

def num_of_divisors(triangle_num)
  result = Set.new
  for i in 1..Math.sqrt(triangle_num)
    quotient, remainder = triangle_num.divmod(i)
    result.add(quotient).add(i) if remainder == 0
  end
  result.size
end

time = Benchmark.measure do
  triangle_num, i = 0, 8
  while true
    triangle_num = triag(i)
    break if num_of_divisors(triangle_num) > 500
    i += 1
  end
  puts "the value of the first triangle number to have over five hundred divisors is #{triangle_num}"
end

puts time


